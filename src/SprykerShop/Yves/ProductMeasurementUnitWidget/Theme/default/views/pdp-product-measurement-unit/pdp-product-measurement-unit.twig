{% extends template('widget') %}

{% define data = {
    idProductConcrete: _widget.product.idProductConcrete | default,
    product: _widget.product,
    minQuantityInBaseUnits: _widget.minQuantityInBaseUnits,
    minQuantityInSalesUnits: _widget.minQuantityInSalesUnits,
    baseUnit: _widget.baseUnit | default,
    idBaseUnit: _widget.idBaseUnit | default,
    salesUnits: _widget.salesUnits | default([]),
    jsonScheme: _widget.jsonScheme | default(''),
    salesUnitCount : _widget.salesUnits|length,
    isAddToCartDisabled : _widget.isAddToCartDisabled | default(false),
    minQuantity: _widget.minQuantity,
    maxQuantity: _widget.maxQuantity,
    quantityInterrval: _widget.quantityInterval
} %}

{% set hasProductMeasurementUnit = data.salesUnitCount >= 1 %}
{% set disabled = data.isAddToCartDisabled %}

{% block body %}
    {% if hasProductMeasurementUnit %}
        <ul class="text-small">
            {% for salesUnit in data.salesUnits %}
                {% if salesUnit.productMeasurementUnit.idProductMeasurementUnit != data.baseUnit.idProductMeasurementUnit %}
                    <li>
                        1 {{ data.baseUnit.name | trans }}
                        = {{ (1 / salesUnit.conversion)|round(4) }} {{ salesUnit.productMeasurementUnit.name | trans }}
                    </li>
                {% endif %}
            {% endfor %}
        </ul>
        <hr />
    {% endif %}

    <div class="grid grid--bottom grid--justify">
        <div class="col {% if hasProductMeasurementUnit %}col--sm-7{% else %}col--sm-5{% endif %}">
            {% include molecule('quantity-input') with {
                inputAttributes: {
                    name: hasProductMeasurementUnit ? 'sales-unit-value' : 'quantity',
                    id: hasProductMeasurementUnit ? 'sales-unit-quantity' : '',
                    class: 'input input--expand js-volume-price__quantity'
                },
                data: {
                    value: hasProductMeasurementUnit ? data.minQuantityInSalesUnits : data.minQuantity,
                    readOnly: data.isAddToCartDisabled,
                    hasUpdateButton: false,
                    minQuantity: data.minQuantity
                    maxQuantity: data.maxQuantity,
                    step: data.quantityInterval
                }
            } only %}

            {% if hasProductMeasurementUnit %}
                <input id="base-unit-quantity" type="hidden" value="{{ data.minQuantityInBaseUnits }}" name="quantity"/>
            {% endif %}
        </div>

        <div class="col {% if hasProductMeasurementUnit %}col--sm-4{% else %}col--sm-6{% endif %}">
            {% if hasProductMeasurementUnit %}
                <label>
                    {{ 'product.measurement.sales_unit' | trans }}
                    {% embed atom('select') with {
                        modifiers: ['expand'],
                        attributes: {
                            name: 'id-product-measurement-sales-unit'
                        },
                        embed: {
                            salesUnits: data.salesUnits
                        }
                    } only %}
                        {% block selectClass %}select-measurement-unit{% endblock %}
                        {% block options %}
                            {% for salesUnit in embed.salesUnits %}
                                <option value="{{ salesUnit.idProductMeasurementSalesUnit }}" {{ (salesUnit.isDefault) ? 'selected' : '' }}>{{ salesUnit.productMeasurementUnit.name | trans }}</option>
                            {% endfor %}
                        {% endblock %}
                    {% endembed %}
                </label>
            {% else %}
                <button type="submit" id="add-to-cart-button" class="button button--success button--expand" data-init-single-click {{ disabled ? 'disabled' : '' }} {{ qa('add-to-cart-button') }}>
                    {% include atom('icon') with {
                        data: {
                            name: 'cart-plus'
                        }
                    } only %}
                    {{ 'page.detail.add-to-cart' | trans }}
                </button>
            {% endif %}
        </div>
    </div>

    {% if hasProductMeasurementUnit %}
        {% include molecule('measurement-quantity-selector', 'ProductMeasurementUnitWidget') with {
            data: {
                json: data.jsonScheme
            }
        } only %}

        <div class="text-small is-hidden measurement-unit-choice">
            <hr />

            <div class="measurement-unit-notifications">
                <div id="quantity-between-units" class="is-hidden">
                    <span>{{ "measurement_units.recommendation.between-units-info" | trans }} (<span id="current-choice"></span>)</span>
                </div>
                <div id="minimum-quantity" class="is-hidden">
                    <span>{{ "measurement_units.recommendation.min-violation" | trans }}</span>
                </div>
                <div id="maximum-quantity" class="is-hidden">
                    <span>{{  "measurement_units.recommendation.max-violation" | trans }}</span>
                </div>
            </div>

            <div id="measurement-unit-choices">
                <span>{{ "measurement_units.recommendation.suggestion" | trans}}:</span>
                <ul class="list"></ul>
            </div>
        </div>
    {% endif %}

    {% if hasProductMeasurementUnit %}
        <hr />
        <button type="submit" id="add-to-cart-button" class="button button--success button--expand" data-init-single-click {{ disabled ? 'disabled' : '' }} {{ qa('add-to-cart-button') }}>
            {% include atom('icon') with {
                data: {
                    name: 'cart-plus'
                }
            } only %}
            {{ 'page.detail.add-to-cart' | trans }}
        </button>
    {% endif %}

    {% set translations = [] %}
    {% for key, salesUnit in data.salesUnits %}
        {% set translations = translations | merge({(salesUnit.productMeasurementUnit.code) : (salesUnit.productMeasurementUnit.name | trans)}) %}
    {% endfor %}

    <script type="application/json" id="measurement-unit-translation">{{ translations|json_encode|raw }}</script>
{% endblock %}
